from pacientes import paciente

class NodoPacientes:
    def __init__(self, id_paciente, nombre):
        self.id_paciente = id_paciente
        self.nombre = nombre
        self.izquierdo = None
        self.derecho = None

class ArbolPacientes:
    """
    Clase que representa un √°rbol binario de b√∫squeda para gestionar pacientes.
    """
    def __init__(self):
        self.raiz = None

    def insertar(self, id_paciente, nombre):
        """
        Inserta un nuevo paciente en el √°rbol, verifica que no exista un duplicado.
        """
        if self.raiz is None:
            self.raiz = NodoPacientes(id_paciente, nombre)
        else:
            self._insertar_auxiliar(self.raiz, id_paciente, nombre)

    def _insertar_auxiliar(self, nodo, id_paciente, nombre):
        # Nodo vac√≠o, insertar aqu√≠ el nuevo paciente
        if not nodo:
            return NodoPacientes(id_paciente, nombre)

        # Comparar el ID del paciente para decidir la posici√≥n
        if id_paciente < nodo.id_paciente:
            # Insertar en el sub√°rbol izquierdo
            if nodo.izquierdo is None:
                nodo.izquierdo = NodoPacientes(id_paciente, nombre)
            else:
                nodo.izquierdo = self._insertar_auxiliar(nodo.izquierdo, id_paciente, nombre)
        elif id_paciente > nodo.id_paciente:
            # Insertar en el sub√°rbol derecho
            if nodo.derecho is None:
                nodo.derecho = NodoPacientes(id_paciente, nombre)
            else:
                nodo.derecho = self._insertar_auxiliar(nodo.derecho, id_paciente, nombre)
        else:
            # Si el ID ya existe, muestra un mensaje (evita duplicados)
            print(f"Error: Ya existe un paciente con el ID {id_paciente}.")

        return nodo

    def eliminar(self, id_paciente):
        """
        Elimina un paciente del √°rbol por su ID.
        """
        self.raiz = self._eliminar_auxiliar(self.raiz, id_paciente)

    def _eliminar_auxiliar(self, raiz, id_paciente):
        """
        M√©todo auxiliar recursivo para eliminar un paciente del √°rbol.
        """
        if not raiz:
            print(f"Paciente con ID {id_paciente} no encontrado.")
            return raiz

        if id_paciente < raiz.id_paciente:
            raiz.izquierdo = self._eliminar_auxiliar(raiz.izquierdo, id_paciente)
        elif id_paciente > raiz.id_paciente:
            raiz.derecho = self._eliminar_auxiliar(raiz.derecho, id_paciente)
        else:
            # Nodo encontrado
            if raiz.izquierdo is None:
                return raiz.derecho
            elif raiz.derecho is None:
                return raiz.izquierdo
            temp = self._minimo_nodo(raiz.derecho)
            raiz.id_paciente = temp.id_paciente
            raiz.nombre = temp.nombre
            raiz.derecho = self._eliminar_auxiliar(raiz.derecho, temp.id_paciente)

        return raiz

    def _minimo_nodo(self, nodo):
        """
        Encuentra el valor m√≠nimo en el sub√°rbol.
        """
        actual = nodo
        while actual.izquierdo is not None:
            actual = actual.izquierdo
        return actual

    def buscar(self, id_paciente):
        """
        Busca un paciente en el √°rbol por su ID y retorna el nodo con la informaci√≥n del paciente.
        """
        return self._buscar_auxiliar(self.raiz, id_paciente)

    def _buscar_auxiliar(self, nodo, id_paciente):
        """
        M√©todo auxiliar recursivo para buscar un paciente por su ID.
        """
        if nodo is None:
            return None

        # Si encontramos el paciente, retornamos el nodo
        if id_paciente == nodo.id_paciente:
            return nodo
        # Buscar en el sub√°rbol izquierdo si el ID es menor
        elif id_paciente < nodo.id_paciente:
            return self._buscar_auxiliar(nodo.izquierdo, id_paciente)
        # Buscar en el sub√°rbol derecho si el ID es mayor
        else:
            return self._buscar_auxiliar(nodo.derecho, id_paciente)

    def __str__(self):
        """
        Devuelve una representaci√≥n en cadena del √°rbol binario en orden.
        """
        return "\n".join(self._in_order(self.raiz)) if self.raiz else "√Årbol vac√≠o."

    def _in_order(self, nodo):
        """
        Realiza un recorrido en orden del √°rbol binario de b√∫squeda y genera una lista.
        """
        if nodo is None:
            return []
        
        nodos = []
        nodos.extend(self._in_order(nodo.izquierdo))  # Recorrido en el sub√°rbol izquierdo
        nodos.append(f"ID: {nodo.id_paciente}, Paciente: {nodo.nombre}")  # Nodo actual
        nodos.extend(self._in_order(nodo.derecho))  # Recorrido en el sub√°rbol derecho

        return nodos



""""
Unidad 4: √Årboles Generales
Algoritmo de Inserci√≥n de Nodos
Complejidad Temporal:

Inserci√≥n: ùëÇ(1)

Cada vez que se agrega un nodo hijo a un nodo espec√≠fico, simplemente se a√±ade a la lista 
de hijos de ese nodo. Esta operaci√≥n es constante en tiempo ya que no requiere recorrer el √°rbol.

Complejidad Espacial:

Espacio Adicional: ùëÇ(1)

La inserci√≥n de un nodo requiere espacio adicional constante para almacenar 
la referencia del nuevo nodo hijo.

Algoritmos de Recorrido (DFS y BFS)
Recorrido en Profundidad (DFS)

Complejidad Temporal:

DFS: ùëÇ(ùëõ)
Donde 
ùëõ
es el n√∫mero total de nodos en el √°rbol. El DFS visita cada nodo una vez, resultando en una complejidad lineal.

Complejidad Espacial:

DFS: ùëÇ(‚Ñé)

Donde ‚Ñé
es la altura del √°rbol. La pila de recursi√≥n puede llegar a tener una profundidad
igual a la altura del √°rbol.

Recorrido en Amplitud (BFS)

Complejidad Temporal:

BFS: ùëÇ(ùëõ)

Al igual que el DFS, el BFS tambi√©n visita cada nodo una vez, resultando en una complejidad lineal.

Complejidad Espacial:

BFS: ùëÇ(ùë§)

Donde ùë§
es el ancho m√°ximo del √°rbol. En el peor caso, la cola puede contener todos
los nodos en el nivel m√°s amplio del √°rbol.

Unidad 5: Cola de Prioridades y Heap Binaria
Algoritmo de Inserci√≥n en Cola de Prioridades (Heap Binario)
Complejidad Temporal:

Inserci√≥n: ùëÇ(logùëõ)

Insertar un elemento en un heap binario requiere ajustar la posici√≥n 
del nuevo elemento para mantener la propiedad del heap, lo cual toma tiempo logar√≠tmico en el n√∫mero de elementos.

Complejidad Espacial:

Espacio Adicional: ùëÇ(1)

No se requiere espacio adicional significativo aparte del almacenamiento del nuevo elemento en el heap.

Algoritmo de Extracci√≥n en Cola de Prioridades (Heap Binario)
Complejidad Temporal:

Extracci√≥n del m√°ximo/m√≠nimo: ùëÇ(logùëõ)

Extraer el elemento de mayor prioridad y ajustar el heap tambi√©n requiere tiempo logar√≠tmico 
en el n√∫mero de elementos.

Complejidad Espacial:

Espacio Adicional: ùëÇ(1)

Similar a la inserci√≥n, no se requiere espacio adicional significativo aparte de los elementos en el heap.
"""""


